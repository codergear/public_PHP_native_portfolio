
DROP PROCEDURE if exists dbname.CRUD_auditor;

DELIMITER [PROCEDURE]
CREATE PROCEDURE dbname.CRUD_auditor(
    IN _transaction varchar(250),
    IN _contract varchar(250),
    IN _premium varchar(250),
    IN _group_rate varchar(250),
    IN _dentalCare_fee varchar(250),
    IN _underwriter_cost varchar(250),
    IN _affiliate varchar(250),
    IN _dentalCare_net varchar(250),
    IN _transaction_date varchar(250),
    IN _payee_affiliate_name varchar(250),
    IN _payee_affiliate_id varchar(250),
    IN _payee_group_name varchar(250),
    IN _is_payed_group varchar(250),
    IN _group_check_number varchar(250),
    IN _group_payment_date varchar(250),
    IN _payee_group_id varchar(250),
    IN _payee_underwriter_name varchar(250),
    IN _is_payed_underwriter varchar(250),
    IN _payee_underwriter_check_number varchar(250),
    IN _payee_underwriter_payment_date varchar(250),
    IN _payee_underwriter_id varchar(250),
    IN _is_cancelled varchar(250),
    IN _is_payed_affiliate varchar(250),
    IN _doctor_name varchar(250),
    IN _doctor_id varchar(250),
    IN _plan_name varchar(250),
    IN _plan_id varchar(250),
    IN _facility_name varchar(250),
    IN _facility_id varchar(250),
    IN _patient_name varchar(250),
    IN _coordinator_name varchar(250),
    IN _coordinator_id varchar(250),
    IN _procedure_date varchar(250),
    IN _payment_method varchar(250),
    IN _a1_affiliate_name varchar(250),
    IN _a1_affiliate_is_payed varchar(250),
    IN _a1_check_number varchar(250),
    IN _a1_payment_date varchar(250),
    IN _a1_affiliate_id varchar(250),
    IN _a1_affiliate_amount varchar(250),
    IN _a2_affiliate_name varchar(250),
    IN _a2_affiliate_is_payed varchar(250),
    IN _a2_check_number varchar(250),
    IN _a2_payment_date varchar(250),
    IN _a2_affiliate_id varchar(250),
    IN _a2_affiliate_amount varchar(250),
    IN _a3_affiliate_name varchar(250),
    IN _a3_affiliate_is_payed varchar(250),
    IN _a3_check_number varchar(250),
    IN _a3_payment_date varchar(250),
    IN _a3_affiliate_id varchar(250),
    IN _a3_affiliate_amount varchar(250),
    IN _contract_status varchar(250),
    IN _transaction_fee varchar(250),
    IN _pay_by varchar(250),
    IN _patient_email varchar(250),
    IN _patient_phone varchar(250),
    IN _patient_full_address varchar(250),
    IN _purchase_date varchar(250),
    IN _completion_date varchar(250),
    IN _cancelation_date varchar(250),
    IN _id_user varchar(250),
    IN _id_auditor INT UNSIGNED,
    IN _cmd_extend varchar(250),
    IN _cmd INT UNSIGNED)
BEGIN
/* CREATE */
  if _cmd = 1 then
    INSERT INTO  tb_auditor(
        transaction,
        contract,
        premium,
        group_rate,
        dentalCare_fee,
        underwriter_cost,
        affiliate,
        dentalCare_net,
        transaction_date,
        payee_affiliate_name,
        payee_affiliate_id,
        payee_group_name,
        is_payed_group,
        group_check_number,
        group_payment_date,
        payee_group_id,
        payee_underwriter_name,
        is_payed_underwriter,
        payee_underwriter_check_number,
        payee_underwriter_payment_date,
        payee_underwriter_id,
        is_cancelled,
        is_payed_affiliate,
        doctor_name,
        doctor_id,
        plan_name,
        plan_id,
        facility_name,
        facility_id,
        patient_name,
        coordinator_name,
        coordinator_id,
        procedure_date,
        payment_method,
        a1_affiliate_name,
        a1_affiliate_is_payed,
        a1_check_number,
        a1_payment_date,
        a1_affiliate_id,
        a1_affiliate_amount,
        a2_affiliate_name,
        a2_affiliate_is_payed,
        a2_check_number,
        a2_payment_date,
        a2_affiliate_id,
        a2_affiliate_amount,
        a3_affiliate_name,
        a3_affiliate_is_payed,
        a3_check_number,
        a3_payment_date,
        a3_affiliate_id,
        a3_affiliate_amount,
        contract_status,
        transaction_fee,
        pay_by,
        patient_email,
        patient_phone,
        patient_full_address,
        purchase_date,
        completion_date,
        cancelation_date,
        active,
        user_UMO,
        date_UMO
    )VALUES( 
        _transaction,
        _contract,
        _premium,
        _group_rate,
        _dentalCare_fee,
        _underwriter_cost,
        _affiliate,
        _dentalCare_net,
        _transaction_date,
        _payee_affiliate_name,
        _payee_affiliate_id,
        _payee_group_name,
        _is_payed_group,
        _group_check_number,
        _group_payment_date,
        _payee_group_id,
        _payee_underwriter_name,
        _is_payed_underwriter,
        _payee_underwriter_check_number,
        _payee_underwriter_payment_date,
        _payee_underwriter_id,
        _is_cancelled,
        _is_payed_affiliate,
        _doctor_name,
        _doctor_id,
        _plan_name,
        _plan_id,
        _facility_name,
        _facility_id,
        _patient_name,
        _coordinator_name,
        _coordinator_id,
        _procedure_date,
        _payment_method,
        _a1_affiliate_name,
        _a1_affiliate_is_payed,
        _a1_check_number,
        _a1_payment_date,
        _a1_affiliate_id,
        _a1_affiliate_amount,
        _a2_affiliate_name,
        _a2_affiliate_is_payed,
        _a2_check_number,
        _a2_payment_date,
        _a2_affiliate_id,
        _a2_affiliate_amount,
        _a3_affiliate_name,
        _a3_affiliate_is_payed,
        _a3_check_number,
        _a3_payment_date,
        _a3_affiliate_id,
        _a3_affiliate_amount,
        _contract_status,
        _transaction_fee,
        _pay_by,
        _patient_email,
        _patient_phone,
        _patient_full_address,
        _purchase_date,
        _completion_date,
        _cancelation_date,
        '1',
        _id_user,
        now()
    ); 

    select @@identity as last_id;
  end if;


/*   READ   */
  if _cmd = 2 then
    SELECT 
    transaction,
    contract,
    premium,
    group_rate,
    dentalCare_fee,
    underwriter_cost,
    affiliate,
    dentalCare_net,
    transaction_date,
    payee_affiliate_name,
    payee_affiliate_id,
    payee_group_name,
    is_payed_group,
    group_check_number,
    group_payment_date,
    payee_group_id,
    payee_underwriter_name,
    is_payed_underwriter,
    payee_underwriter_check_number,
    payee_underwriter_payment_date,
    payee_underwriter_id,
    is_cancelled,
    is_payed_affiliate,
    doctor_name,
    doctor_id,
    plan_name,
    plan_id,
    facility_name,
    facility_id,
    patient_name,
    coordinator_name,
    coordinator_id,
    procedure_date,
    payment_method,
    a1_affiliate_name,
    a1_affiliate_is_payed,
    a1_check_number,
    a1_payment_date,
    a1_affiliate_id,
    a1_affiliate_amount,
    a2_affiliate_name,
    a2_affiliate_is_payed,
    a2_check_number,
    a2_payment_date,
    a2_affiliate_id,
    a2_affiliate_amount,
    a3_affiliate_name,
    a3_affiliate_is_payed,
    a3_check_number,
    a3_payment_date,
    a3_affiliate_id,
    a3_affiliate_amount,
    contract_status,
    transaction_fee,
    pay_by,
    patient_email,
    patient_phone,
    patient_full_address,
    purchase_date,
    completion_date,
    cancelation_date,
    id_auditor,
    user_umo as '_user_umo',
    date_umo as '_date_umo'
    FROM tb_auditor where active=1 order by date_UMO desc;
  end if;

/*   READ BY   */
  if _cmd = 21 then
    set @param = _cmd_extend;
    set @Expression = CONCAT("SELECT 
    transaction,
    contract,
    premium,
    group_rate,
    dentalCare_fee,
    underwriter_cost,
    affiliate,
    dentalCare_net,
    transaction_date,
    payee_affiliate_name,
    payee_affiliate_id,
    payee_group_name,
    is_payed_group,
    group_check_number,
    group_payment_date,
    payee_group_id,
    payee_underwriter_name,
    is_payed_underwriter,
    payee_underwriter_check_number,
    payee_underwriter_payment_date,
    payee_underwriter_id,
    is_cancelled,
    is_payed_affiliate,
    doctor_name,
    doctor_id,
    plan_name,
    plan_id,
    facility_name,
    facility_id,
    patient_name,
    coordinator_name,
    coordinator_id,
    procedure_date,
    payment_method,
    a1_affiliate_name,
    a1_affiliate_is_payed,
    a1_check_number,
    a1_payment_date,
    a1_affiliate_id,
    a1_affiliate_amount,
    a2_affiliate_name,
    a2_affiliate_is_payed,
    a2_check_number,
    a2_payment_date,
    a2_affiliate_id,
    a2_affiliate_amount,
    a3_affiliate_name,
    a3_affiliate_is_payed,
    a3_check_number,
    a3_payment_date,
    a3_affiliate_id,
    a3_affiliate_amount,
    contract_status,
    transaction_fee,
    pay_by,
    patient_email,
    patient_phone,
    patient_full_address,
    purchase_date,
    completion_date,
    cancelation_date,
    id_auditor,
    user_umo as '_user_umo',
    date_umo as '_date_umo'
    FROM tb_auditor where active=1 and ",@param," order by date_UMO desc; ");
    PREPARE expression_query FROM @Expression;
    EXECUTE expression_query ;
  end if;


/*  UPDATE  */
  if _cmd = 3 then
    update tb_auditor set 
        transaction = _transaction,
        contract = _contract,
        premium = _premium,
        group_rate = _group_rate,
        dentalCare_fee = _dentalCare_fee,
        underwriter_cost = _underwriter_cost,
        affiliate = _affiliate,
        dentalCare_net = _dentalCare_net,
        transaction_date = _transaction_date,
        payee_affiliate_name = _payee_affiliate_name,
        payee_affiliate_id = _payee_affiliate_id,
        payee_group_name = _payee_group_name,
        is_payed_group = _is_payed_group,
        group_check_number = _group_check_number,
        group_payment_date = _group_payment_date,
        payee_group_id = _payee_group_id,
        payee_underwriter_name = _payee_underwriter_name,
        is_payed_underwriter = _is_payed_underwriter,
        payee_underwriter_check_number = _payee_underwriter_check_number,
        payee_underwriter_payment_date = _payee_underwriter_payment_date,
        payee_underwriter_id = _payee_underwriter_id,
        is_cancelled = _is_cancelled,
        is_payed_affiliate = _is_payed_affiliate,
        doctor_name = _doctor_name,
        doctor_id = _doctor_id,
        plan_name = _plan_name,
        plan_id = _plan_id,
        facility_name = _facility_name,
        facility_id = _facility_id,
        patient_name = _patient_name,
        coordinator_name = _coordinator_name,
        coordinator_id = _coordinator_id,
        procedure_date = _procedure_date,
        payment_method = _payment_method,
        a1_affiliate_name = _a1_affiliate_name,
        a1_affiliate_is_payed = _a1_affiliate_is_payed,
        a1_check_number = _a1_check_number,
        a1_payment_date = _a1_payment_date,
        a1_affiliate_id = _a1_affiliate_id,
        a1_affiliate_amount = _a1_affiliate_amount,
        a2_affiliate_name = _a2_affiliate_name,
        a2_affiliate_is_payed = _a2_affiliate_is_payed,
        a2_check_number = _a2_check_number,
        a2_payment_date = _a2_payment_date,
        a2_affiliate_id = _a2_affiliate_id,
        a2_affiliate_amount = _a2_affiliate_amount,
        a3_affiliate_name = _a3_affiliate_name,
        a3_affiliate_is_payed = _a3_affiliate_is_payed,
        a3_check_number = _a3_check_number,
        a3_payment_date = _a3_payment_date,
        a3_affiliate_id = _a3_affiliate_id,
        a3_affiliate_amount = _a3_affiliate_amount,
        contract_status = _contract_status,
        transaction_fee = _transaction_fee,
        pay_by = _pay_by,
        patient_email = _patient_email,
        patient_phone = _patient_phone,
        patient_full_address = _patient_full_address,
        purchase_date = _purchase_date,
        completion_date = _completion_date,
        cancelation_date = _cancelation_date,
        date_UMO=now(),user_UMO=_id_user where id_auditor=_id_auditor ;
  end if;

/*  DELETE  */ 
  if _cmd = 4 then
    update tb_auditor set active=0,date_UMO=now(),user_UMO=_id_user where id_auditor= _id_auditor ;
  end if;

/*  DELETE Referential integrity  */ 
  if _cmd = 41 then
    set @item_id = _id_auditor;
    select count, msg from (
      select 0 as count, 'auditor' as msg
    ) tbl;
  end if;

end;
[PROCEDURE]
DELIMITER ;

